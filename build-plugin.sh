#!/bin/bash

# WordPress Plugin Build Script
# Creates a clean zip file ready for WordPress upload
# Author: jecrs687
# Plugin: Custom SEO

set -e  # Exit on any error

# Configuration
PLUGIN_NAME="custom-seo"
PLUGIN_VERSION="1.0.0"
BUILD_DIR="build"
PLUGIN_DIR="$BUILD_DIR/$PLUGIN_NAME"
ZIP_NAME="${PLUGIN_NAME}-${PLUGIN_VERSION}.zip"
ZIP_PATH="$BUILD_DIR/$ZIP_NAME"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if required commands exist
check_dependencies() {
    print_status "Checking dependencies..."
    
    if ! command -v zip &> /dev/null; then
        print_error "zip command not found. Please install zip utility."
        exit 1
    fi
    
    print_success "All dependencies satisfied."
}

# Function to clean previous builds
clean_build() {
    print_status "Cleaning previous builds..."
    
    if [ -d "$BUILD_DIR" ]; then
        rm -rf "$BUILD_DIR"
        print_success "Removed existing build directory."
    fi
}

# Function to create build directory structure
create_build_structure() {
    print_status "Creating build directory structure..."
    
    mkdir -p "$BUILD_DIR"
    mkdir -p "$PLUGIN_DIR"
    mkdir -p "$PLUGIN_DIR/admin"
    mkdir -p "$PLUGIN_DIR/includes"
    mkdir -p "$PLUGIN_DIR/assets"
    mkdir -p "$PLUGIN_DIR/languages"
    
    # Create a README in the build directory
    cat > "$BUILD_DIR/README.md" << EOF
# Build Directory

This directory contains the WordPress-ready plugin files and zip packages.

## Contents

- \`custom-seo/\` - Temporary plugin directory used during build process
- \`custom-seo-*.zip\` - WordPress plugin zip files ready for upload

## Usage

The zip files in this directory can be uploaded directly to WordPress:

1. Go to WordPress Admin → Plugins → Add New → Upload Plugin
2. Select the \`custom-seo-1.0.0.zip\` file
3. Click "Install Now" and then "Activate"

## Build Process

These files are generated by the \`build-plugin.sh\` script in the project root.

Generated on: $(date)
EOF
    
    print_success "Build directory structure created."
}

# Function to copy plugin files
copy_plugin_files() {
    print_status "Copying plugin files..."
    
    # Main plugin file
    cp custom-seo.php "$PLUGIN_DIR/"
    print_status "✓ Copied main plugin file"
    
    # Admin files
    cp -r admin/* "$PLUGIN_DIR/admin/"
    print_status "✓ Copied admin files"
    
    # Includes files
    cp -r includes/* "$PLUGIN_DIR/includes/"
    print_status "✓ Copied includes files"
    
    # Assets files
    cp -r assets/* "$PLUGIN_DIR/assets/"
    print_status "✓ Copied assets files"
    
    # Documentation files
    if [ -f "readme.md" ]; then
        cp readme.md "$PLUGIN_DIR/README.md"
        print_status "✓ Copied README.md"
    fi
    
    if [ -f "DOCUMENTATION.md" ]; then
        cp DOCUMENTATION.md "$PLUGIN_DIR/"
        print_status "✓ Copied DOCUMENTATION.md"
    fi
    
    # License file (if exists)
    if [ -f "LICENSE" ]; then
        cp LICENSE "$PLUGIN_DIR/"
        print_status "✓ Copied LICENSE file"
    fi
    
    # WordPress readme.txt (if exists)
    if [ -f "readme.txt" ]; then
        cp readme.txt "$PLUGIN_DIR/"
        print_status "✓ Copied WordPress readme.txt"
    fi
    
    # Languages directory (create empty structure)
    touch "$PLUGIN_DIR/languages/.gitkeep"
    print_status "✓ Created languages directory"
    
    print_success "All plugin files copied successfully."
}

# Function to clean unwanted files from build
clean_build_files() {
    print_status "Cleaning unwanted files from build..."
    
    # Remove development files
    find "$PLUGIN_DIR" -name ".DS_Store" -delete 2>/dev/null || true
    find "$PLUGIN_DIR" -name "Thumbs.db" -delete 2>/dev/null || true
    find "$PLUGIN_DIR" -name "*.tmp" -delete 2>/dev/null || true
    find "$PLUGIN_DIR" -name "*.log" -delete 2>/dev/null || true
    
    # Remove backup files
    find "$PLUGIN_DIR" -name "*-backup.php" -delete 2>/dev/null || true
    find "$PLUGIN_DIR" -name "*.bak" -delete 2>/dev/null || true
    
    # Remove IDE files
    rm -rf "$PLUGIN_DIR/.vscode" 2>/dev/null || true
    rm -rf "$PLUGIN_DIR/.idea" 2>/dev/null || true
    
    print_success "Build files cleaned."
}

# Function to validate plugin structure
validate_plugin() {
    print_status "Validating plugin structure..."
    
    # Check main plugin file
    if [ ! -f "$PLUGIN_DIR/custom-seo.php" ]; then
        print_error "Main plugin file not found!"
        exit 1
    fi
    
    # Check for plugin header
    if ! grep -q "Plugin Name:" "$PLUGIN_DIR/custom-seo.php"; then
        print_error "Plugin header not found in main file!"
        exit 1
    fi
    
    # Check required directories
    required_dirs=("admin" "includes" "assets")
    for dir in "${required_dirs[@]}"; do
        if [ ! -d "$PLUGIN_DIR/$dir" ]; then
            print_error "Required directory '$dir' not found!"
            exit 1
        fi
    done
    
    # Check file permissions
    find "$PLUGIN_DIR" -name "*.php" -exec chmod 644 {} \;
    find "$PLUGIN_DIR" -type d -exec chmod 755 {} \;
    
    print_success "Plugin structure validated."
}

# Function to create the zip file
create_zip() {
    print_status "Creating zip file..."
    
    cd "$BUILD_DIR"
    
    # Create zip with proper compression
    zip -r "$ZIP_NAME" "$PLUGIN_NAME" -x "*.DS_Store" "*/Thumbs.db" "*.tmp"
    
    cd ..
    
    # Get file size
    if command -v stat &> /dev/null; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            FILE_SIZE=$(stat -f%z "$ZIP_PATH")
        else
            # Linux
            FILE_SIZE=$(stat -c%s "$ZIP_PATH")
        fi
        
        # Convert to human readable
        if [ $FILE_SIZE -gt 1048576 ]; then
            SIZE_DISPLAY="$(echo "scale=2; $FILE_SIZE/1048576" | bc)MB"
        elif [ $FILE_SIZE -gt 1024 ]; then
            SIZE_DISPLAY="$(echo "scale=2; $FILE_SIZE/1024" | bc)KB"
        else
            SIZE_DISPLAY="${FILE_SIZE}B"
        fi
        
        print_success "Zip file created: $ZIP_PATH ($SIZE_DISPLAY)"
    else
        print_success "Zip file created: $ZIP_PATH"
    fi
}

# Function to display final information
show_final_info() {
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    print_success "WordPress Plugin Build Complete!"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo -e "${BLUE}Plugin Name:${NC} Custom SEO"
    echo -e "${BLUE}Version:${NC} $PLUGIN_VERSION"
    echo -e "${BLUE}Zip File:${NC} $ZIP_NAME"
    echo -e "${BLUE}Location:${NC} $(pwd)/$ZIP_PATH"
    echo ""
    echo -e "${GREEN}Ready for WordPress upload!${NC}"
    echo ""
    echo -e "${YELLOW}Next Steps:${NC}"
    echo "1. Go to your WordPress admin dashboard"
    echo "2. Navigate to Plugins → Add New → Upload Plugin"
    echo "3. Choose the file: $ZIP_PATH"
    echo "4. Click 'Install Now' and then 'Activate'"
    echo ""
    echo -e "${BLUE}Plugin Features:${NC}"
    echo "• Complete SEO meta fields management"
    echo "• Categories & Tags auto-creation"
    echo "• XML Sitemaps generation"
    echo "• Breadcrumbs with JSON-LD schema"
    echo "• Google Analytics 4 integration"
    echo "• REST API support"
    echo "• Social media optimization"
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to clean up build directory
cleanup() {
    if [ "$1" != "--keep-build" ]; then
        # Only remove the plugin directory, keep the zip file
        rm -rf "$PLUGIN_DIR"
        print_status "Build directory cleaned up (zip file preserved)."
    else
        print_status "Build directory preserved at: $BUILD_DIR"
    fi
}

# Main execution
main() {
    echo ""
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo -e "${BLUE}WordPress Plugin Builder${NC}"
    echo -e "${BLUE}Custom SEO Plugin v${PLUGIN_VERSION}${NC}"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    # Check if we're in the right directory
    if [ ! -f "custom-seo.php" ]; then
        print_error "custom-seo.php not found. Please run this script from the plugin root directory."
        exit 1
    fi
    
    check_dependencies
    clean_build
    create_build_structure
    copy_plugin_files
    clean_build_files
    validate_plugin
    create_zip
    cleanup "$1"
    show_final_info
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "WordPress Plugin Builder for Custom SEO"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --help, -h          Show this help message"
        echo "  --keep-build        Keep the build directory after creating zip"
        echo "  --version, -v       Show version information"
        echo ""
        echo "This script creates a clean, WordPress-ready zip file of the Custom SEO plugin."
        echo "The zip file excludes development files and includes only production-ready code."
        exit 0
        ;;
    --version|-v)
        echo "WordPress Plugin Builder v1.0.0"
        echo "For Custom SEO Plugin v$PLUGIN_VERSION"
        exit 0
        ;;
    *)
        main "$1"
        ;;
esac